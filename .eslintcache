[{"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/index.js":"1","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/App.js":"2","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/serviceWorker.js":"3","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/store.js":"4","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/PrivateRoute.js":"5","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/layouts/Guest.js":"6","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/layouts/Admin.js":"7","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/index.js":"8","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/routes.js":"9","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/errorReducer.js":"10","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/evseReducer.js":"11","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/authReducer.js":"12","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/locationReducer.js":"13","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/connectorReducer.js":"14","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/vehiculeReducer.js":"15","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Footer/Footer.js":"16","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Footer/GuestFooter.js":"17","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Sidebar/Sidebar.js":"18","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Navbars/AdminNavbar.js":"19","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Navbars/GuestNavbar.js":"20","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/types.js":"21","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/validation/is-empty.js":"22","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/MapsGuest.js":"23","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/authActions.js":"24","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/TableList.js":"25","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/cpo/Bornes.js":"26","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Login.js":"27","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Upgrade.js":"28","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Register.js":"29","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Typography.js":"30","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/UserProfile.js":"31","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Maps.js":"32","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Borne.js":"33","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Vehicule.js":"34","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Dashboard.js":"35","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/api.js":"36","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/greenEnergyTypes.js":"37","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/bookable.js":"38","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/payment.js":"39","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/guest/MapGuest.js":"40","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/locationAction.js":"41","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/connectionType.js":"42","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/vehiculeActions.js":"43","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/connectorFormat.js":"44","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/powerTypes.js":"45","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/cpo/Map.js":"46","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/hooks/usePosition.js":"47","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/connectorTypes.js":"48","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/msp/Map.js":"49","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/roles.js":"50","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Page404.js":"51"},{"size":429,"mtime":1632485356381,"results":"52","hashOfConfig":"53"},{"size":1842,"mtime":1632162992840,"results":"54","hashOfConfig":"53"},{"size":4812,"mtime":1627905833084,"results":"55","hashOfConfig":"53"},{"size":449,"mtime":1627905833092,"results":"56","hashOfConfig":"53"},{"size":804,"mtime":1630318329664,"results":"57","hashOfConfig":"53"},{"size":2429,"mtime":1632162993248,"results":"58","hashOfConfig":"53"},{"size":3007,"mtime":1632162993248,"results":"59","hashOfConfig":"53"},{"size":508,"mtime":1629812307780,"results":"60","hashOfConfig":"53"},{"size":2670,"mtime":1636636000843,"results":"61","hashOfConfig":"53"},{"size":299,"mtime":1627903730752,"results":"62","hashOfConfig":"53"},{"size":451,"mtime":1627903730756,"results":"63","hashOfConfig":"53"},{"size":625,"mtime":1632469582933,"results":"64","hashOfConfig":"53"},{"size":643,"mtime":1635721615428,"results":"65","hashOfConfig":"53"},{"size":475,"mtime":1629799929558,"results":"66","hashOfConfig":"53"},{"size":623,"mtime":1633608116874,"results":"67","hashOfConfig":"53"},{"size":1827,"mtime":1632355332300,"results":"68","hashOfConfig":"53"},{"size":1827,"mtime":1632355324916,"results":"69","hashOfConfig":"53"},{"size":2801,"mtime":1632369358994,"results":"70","hashOfConfig":"53"},{"size":5341,"mtime":1632355060488,"results":"71","hashOfConfig":"53"},{"size":4430,"mtime":1632316305086,"results":"72","hashOfConfig":"53"},{"size":833,"mtime":1637092859690,"results":"73","hashOfConfig":"53"},{"size":223,"mtime":1627905833140,"results":"74","hashOfConfig":"53"},{"size":1003,"mtime":1632365552346,"results":"75","hashOfConfig":"53"},{"size":2168,"mtime":1635679016048,"results":"76","hashOfConfig":"53"},{"size":2647,"mtime":1636030995081,"results":"77","hashOfConfig":"53"},{"size":294,"mtime":1632162993324,"results":"78","hashOfConfig":"53"},{"size":3842,"mtime":1632366132934,"results":"79","hashOfConfig":"53"},{"size":3857,"mtime":1629283462184,"results":"80","hashOfConfig":"53"},{"size":7086,"mtime":1632477646741,"results":"81","hashOfConfig":"53"},{"size":5574,"mtime":1629283963904,"results":"82","hashOfConfig":"53"},{"size":8776,"mtime":1635935536663,"results":"83","hashOfConfig":"53"},{"size":11544,"mtime":1637248747545,"results":"84","hashOfConfig":"53"},{"size":18672,"mtime":1636216551156,"results":"85","hashOfConfig":"53"},{"size":14099,"mtime":1637071477980,"results":"86","hashOfConfig":"53"},{"size":21242,"mtime":1632162993256,"results":"87","hashOfConfig":"53"},{"size":120,"mtime":1630450965822,"results":"88","hashOfConfig":"53"},{"size":218,"mtime":1632162993184,"results":"89","hashOfConfig":"53"},{"size":198,"mtime":1632162993044,"results":"90","hashOfConfig":"53"},{"size":231,"mtime":1632162993184,"results":"91","hashOfConfig":"53"},{"size":5290,"mtime":1637158612940,"results":"92","hashOfConfig":"53"},{"size":4717,"mtime":1637235463254,"results":"93","hashOfConfig":"53"},{"size":358,"mtime":1632266196945,"results":"94","hashOfConfig":"95"},{"size":2750,"mtime":1635723312752,"results":"96","hashOfConfig":"53"},{"size":358,"mtime":1632162993128,"results":"97","hashOfConfig":"95"},{"size":204,"mtime":1632162993184,"results":"98","hashOfConfig":"95"},{"size":5741,"mtime":1636038090078,"results":"99","hashOfConfig":"53"},{"size":1174,"mtime":1637092662510,"results":"100","hashOfConfig":"53"},{"size":2668,"mtime":1637071447048,"results":"101","hashOfConfig":"53"},{"size":14503,"mtime":1637248641485,"results":"102","hashOfConfig":"53"},{"size":287,"mtime":1632361916800,"results":"103","hashOfConfig":"53"},{"size":1614,"mtime":1636632816884,"results":"104","hashOfConfig":"53"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"1t3pd61",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"107"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"107"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"107"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},"27hg76",{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"198"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"107"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"107"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/index.js",[],[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/App.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/serviceWorker.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/store.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/PrivateRoute.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/layouts/Guest.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/layouts/Admin.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/index.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/routes.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/errorReducer.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/evseReducer.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/authReducer.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/locationReducer.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/connectorReducer.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/reducers/vehiculeReducer.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Footer/Footer.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Footer/GuestFooter.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Sidebar/Sidebar.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Navbars/AdminNavbar.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/Navbars/GuestNavbar.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/types.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/validation/is-empty.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/MapsGuest.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/authActions.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/TableList.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/cpo/Bornes.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Login.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Upgrade.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Register.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Typography.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/UserProfile.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Maps.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Borne.js",["216"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  addLocation,\n  getCPOLocations,\n  updateCPOLocation,\n  deleteLocation,\n} from '../actions/locationAction';\nimport {\n  Button,\n  Card,\n  Form,\n  Container,\n  Row,\n  Col,\n  Modal,\n  OverlayTrigger,\n  Tooltip,\n  Nav,\n  ListGroupItem,\n  ListGroup,\n} from 'react-bootstrap';\nimport { usePosition } from '../hooks/usePosition';\nimport connectorTypeOptions from './../constants/connectorTypes';\n\nfunction Borne({\n  locations,\n  loading,\n  addLocation,\n  user,\n  getCPOLocations,\n  updateCPOLocation,\n  deleteLocation,\n}) {\n  const [currentStation, setcurrentStation] = useState({});\n\n  // Form initial values\n  const initialValues = {\n    location_name: currentStation.location_name ?? '',\n    address: currentStation.address ?? user.address,\n    bookable: currentStation.bookable ?? false,\n    free_charging: currentStation.free_charging ?? false,\n    connection: currentStation.connection ?? '',\n    condition_acces: currentStation.condition_acces ?? '',\n    payment_by_card: currentStation.payment_by_card ?? false,\n    location_type: currentStation.location_type ?? '',\n    postal_code: currentStation.postal_code ?? '',\n    tarif: currentStation.tarif ?? '',\n  };\n  // Local State Management\n  const { latitude, longitude } = usePosition();\n  // Modal Add/Update\n  const [showModal, setshowModal] = useState(false);\n  // Modal Delete\n  const [showDeleteModal, setshowDeleteModal] = useState(false);\n  const [locationProperties, setlocationProperties] = useState(initialValues);\n  // Form functions\n  const handleInputChange = (value, fieldName) => {\n    setlocationProperties(prevState => ({ ...prevState, [fieldName]: value }));\n  };\n  // CRUD actions call\n  const _addLocation = _user => {\n    if (locationProperties) {\n      addLocation({\n        ...locationProperties,\n        position: {\n          latitude: latitude ? latitude.toString() : '49.2603667',\n          longitude: longitude ? longitude.toString() : '3.0872607',\n        },\n        userId: _user.id,\n      });\n      setlocationProperties(initialValues);\n      setshowModal(false);\n    } else return;\n  };\n  const _updateLocation = current => {\n    updateCPOLocation(locationProperties, current._id);\n    setshowModal(false);\n    setlocationProperties(initialValues);\n    setcurrentStation({});\n  };\n\n  const _deleteLocation = current => {\n    console.log(' _user.id', user.id);\n    deleteLocation(current._id, user.id);\n    setshowDeleteModal(false);\n    setcurrentStation({});\n  };\n\n  useEffect(() => {\n    getCPOLocations(user.id);\n  }, [getCPOLocations]);\n\n  useEffect(() => {\n    if (currentStation) setlocationProperties({ ...currentStation });\n  }, [currentStation]);\n\n  return (\n    <>\n      {loading ? (\n        <div> Chargement ...</div>\n      ) : (\n        <Container fluid>\n          <Button\n            className='btn-fill pull-right'\n            type='submit'\n            onClick={() => {\n              setcurrentStation({});\n              setshowModal(true);\n            }}\n          >\n            Nouvelle borne\n          </Button>\n          <hr />\n          {currentStation ? (\n            <>\n              <Modal\n                show={showModal}\n                onHide={() => setshowModal(false)}\n                className='search-modal text-center modal fade'\n              >\n                <Modal.Body>\n                  <div className='modal-content'>\n                    <div className='modal-body'>\n                      <Card>\n                        <Card.Header>\n                          <Card.Title as='h4'>\n                            {currentStation._id\n                              ? `Modifier la borne ${currentStation.location_name}`\n                              : `Nouvelle borne`}\n                          </Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                          <Form>\n                            <Row>\n                              <Col md='6'>\n                                <Form.Group>\n                                  <label>Titre</label>\n                                  <Form.Control\n                                    placeholder={\n                                      currentStation.location_name ?? 'Titre'\n                                    }\n                                    type='text'\n                                    name='location_name'\n                                    onChange={e =>\n                                      handleInputChange(\n                                        e.target.value,\n                                        e.target.name\n                                      )\n                                    }\n                                  />\n                                </Form.Group>\n                              </Col>\n                              <Col md='6'>\n                                <Form.Group>\n                                  <label>Type d'emplacement</label>\n                                  <Form.Control\n                                    placeholder={\n                                      currentStation.location_type ??\n                                      'Station service, parking,...'\n                                    }\n                                    type='text'\n                                    name='location_type'\n                                    onChange={e =>\n                                      handleInputChange(\n                                        e.target.value,\n                                        e.target.name\n                                      )\n                                    }\n                                  />\n                                </Form.Group>\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col md='4'>\n                                <Form.Check\n                                  type='switch'\n                                  id='isbookable-switch'\n                                  label='Reservation'\n                                  value={locationProperties.bookable}\n                                  onChange={e =>\n                                    setlocationProperties(prev => ({\n                                      ...prev,\n                                      bookable: !prev.bookable,\n                                    }))\n                                  }\n                                />\n                              </Col>\n                              <Col md='4'>\n                                <Form.Check\n                                  type='switch'\n                                  id='isLive-switch'\n                                  label='Live'\n                                  value={locationProperties.status}\n                                  onChange={e =>\n                                    setlocationProperties(prev => ({\n                                      ...prev,\n                                      status: !prev.status,\n                                    }))\n                                  }\n                                />\n                              </Col>\n                              <Col md='4'>\n                                <Form.Check\n                                  type='switch'\n                                  id='free_charging-switch'\n                                  label='Recharge gratuite'\n                                  onChange={e =>\n                                    setlocationProperties(prev => ({\n                                      ...prev,\n                                      free_charging: !prev.free_charging,\n                                    }))\n                                  }\n                                />\n                              </Col>\n                            </Row>\n                            {locationProperties.free_charging ? (\n                              <br />\n                            ) : (\n                              <Row>\n                                <Col md='12'>\n                                  <Form.Group>\n                                    <label>Tarif</label>\n                                    <Form.Control\n                                      placeholder='Prix de recharge'\n                                      type='text'\n                                      name='tarif'\n                                      onChange={e =>\n                                        handleInputChange(\n                                          e.target.value,\n                                          e.target.name\n                                        )\n                                      }\n                                    />\n                                  </Form.Group>\n                                </Col>\n                              </Row>\n                            )}\n                            <Row>\n                              <Col md='12'>\n                                <Form.Group>\n                                  <label>Condition d'accès</label>\n                                  <Form.Control\n                                    placeholder={`Conditions d'accès`}\n                                    type='text'\n                                    name='condition_acces'\n                                    onChange={e =>\n                                      handleInputChange(\n                                        e.target.value,\n                                        e.target.name\n                                      )\n                                    }\n                                  />\n                                </Form.Group>\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col>\n                                <Form.Control\n                                  aria-label='Connector select'\n                                  as='select'\n                                  custom\n                                  name='standard'\n                                  onChange={e =>\n                                    handleInputChange(\n                                      e.target.value,\n                                      e.target.name\n                                    )\n                                  }\n                                >\n                                  <option defaultValue=''>\n                                    Type de connecteur\n                                  </option>\n                                  {connectorTypeOptions.map((option, idx) => (\n                                    <option key={idx} value={option.value}>\n                                      {option.label}\n                                    </option>\n                                  ))}\n                                </Form.Control>\n                              </Col>\n                            </Row>\n                            <Row>\n                              <Col md='6'>\n                                <Form.Group>\n                                  <label>Latitude</label>\n                                  <Form.Control\n                                    type='text'\n                                    name='latitude'\n                                    onChange={e =>\n                                      handleInputChange(\n                                        e.target.value,\n                                        e.target.name\n                                      )\n                                    }\n                                  />\n                                </Form.Group>\n                              </Col>\n                              <Col md='6'>\n                                <Form.Group>\n                                  <label>Longitude</label>\n                                  <Form.Control\n                                    type='text'\n                                    name='longitude'\n                                    onChange={e =>\n                                      handleInputChange(\n                                        e.target.value,\n                                        e.target.name\n                                      )\n                                    }\n                                  />\n                                </Form.Group>\n                              </Col>\n                            </Row>\n                          </Form>\n                          {currentStation._id ? (\n                            <Button\n                              className='btn-fill pull-right'\n                              type='submit'\n                              onClick={() => _updateLocation(currentStation)}\n                            >\n                              Modifier\n                            </Button>\n                          ) : (\n                            <Button\n                              className='btn-fill pull-right'\n                              type='submit'\n                              onClick={() => _addLocation(user)}\n                            >\n                              Ajouter\n                            </Button>\n                          )}\n                        </Card.Body>\n                      </Card>\n                    </div>\n                  </div>\n                </Modal.Body>\n              </Modal>\n              <Modal\n                show={showDeleteModal}\n                onHide={() => setshowDeleteModal(false)}\n                className='search-modal text-center modal fade'\n              >\n                <Modal.Body>\n                  <div className='modal-content'>\n                    <div className='modal-body'>\n                      <Row>\n                        <Col>\n                          {`Supprimer la borne ${currentStation.location_name}`}\n                        </Col>\n                      </Row>\n\n                      <Row>\n                        <Col>\n                          <Button\n                            className='btn-fill pull-right'\n                            type='submit'\n                            onClick={() => {\n                              _deleteLocation(currentStation);\n                            }}\n                          >\n                            Supprimer\n                          </Button>\n                        </Col>\n                        <Col>\n                          <Button\n                            className='btn-fill pull-right'\n                            type='submit'\n                            onClick={() => setshowDeleteModal(false)}\n                          >\n                            Annuler\n                          </Button>\n                        </Col>\n                      </Row>\n                    </div>\n                  </div>\n                </Modal.Body>\n              </Modal>\n            </>\n          ) : (\n            <hr />\n          )}\n\n          <Row>\n            {locations?.length ? (\n              locations?.map(location => {\n                return (\n                  <Col md='4'>\n                    <Card style={{ width: '18rem' }}>\n                      <Card.Header>{location.location_name}</Card.Header>\n                      <Card.Body>\n                        <Card.Title>{location.address}</Card.Title>\n                        <br />\n                        <Card.Subtitle>{location.location_type}</Card.Subtitle>\n                        <br />\n                        <ListGroup className='list-group-flush'>\n                          <ListGroupItem>\n                            {location.free_charging\n                              ? 'Recharge gratuite'\n                              : 'Recharge payante'}\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            {location.bookable\n                              ? 'Reservable'\n                              : 'Non reservable'}\n                          </ListGroupItem>\n                          <ListGroupItem>\n                            {location.condition_acces}\n                          </ListGroupItem>\n                        </ListGroup>\n                      </Card.Body>\n                      <Card.Footer>\n                        <small className='text-muted'>\n                          <OverlayTrigger\n                            overlay={\n                              <Tooltip id='tooltip-488980961'>Modifier</Tooltip>\n                            }\n                          >\n                            <Button\n                              className='btn-simple btn-link p-1'\n                              type='button'\n                              variant='info'\n                              onClick={() => {\n                                setcurrentStation(location);\n                                setshowModal(true);\n                                console.log(currentStation);\n                              }}\n                            >\n                              <i className='fas fa-edit' />\n                            </Button>\n                          </OverlayTrigger>\n                          <OverlayTrigger\n                            overlay={\n                              <Tooltip id='tooltip-506045838'>\n                                Supprimer\n                              </Tooltip>\n                            }\n                          >\n                            <Button\n                              className='btn-simple btn-link p-1'\n                              type='button'\n                              variant='danger'\n                              onClick={() => {\n                                setcurrentStation(location);\n                                setshowDeleteModal(true);\n                              }}\n                            >\n                              <i className='fas fa-times' />\n                            </Button>\n                          </OverlayTrigger>\n                        </small>\n                      </Card.Footer>\n                    </Card>\n                  </Col>\n                );\n              })\n            ) : (\n              <p>Aucune borne pour le moment</p>\n            )}\n          </Row>\n        </Container>\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  loading: state.vehicule.loading,\n  user: state.auth.user,\n  locations: state.location.locations,\n});\n\nexport default connect(mapStateToProps, {\n  getCPOLocations,\n  addLocation,\n  updateCPOLocation,\n  deleteLocation,\n})(Borne);\n","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Vehicule.js",["217"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  addVehicule,\n  updateVehicule,\n  getVehicules,\n  deleteVehicule,\n} from '../actions/vehiculeActions';\nimport connectorTypeOptions from './../constants/connectorTypes';\nimport {\n  Button,\n  Card,\n  Form,\n  Modal,\n  Container,\n  Row,\n  Col,\n  OverlayTrigger,\n  ListGroupItem,\n  Tooltip,\n} from 'react-bootstrap';\n\nfunction Vehicule({\n  vehicules,\n  loading,\n  addVehicule,\n  user,\n  getVehicules,\n  updateVehicule,\n  deleteVehicule,\n}) {\n  // Current Vehicule\n  const [currentVehicule, setcurrentVehicule] = useState({});\n  // Form initial values\n  const initalValues = {\n    brand: currentVehicule.brand ?? '',\n    model: currentVehicule.model ?? '',\n    standard: currentVehicule.standard ?? '',\n    format: currentVehicule.format ?? '',\n    power_type: currentVehicule.power_type ?? '',\n    max_voltage: currentVehicule.max_voltage ?? '',\n    max_amperage: currentVehicule.max_amperage ?? '',\n  };\n\n  // Local State Management\n  const [vehiculeProperties, setvehiculeProperties] = useState(initalValues);\n  // Modal Add/Update\n  const [showModal, setshowModal] = useState(false);\n  // Modal Delete\n  const [showDeleteModal, setshowDeleteModal] = useState(false);\n  // Form functions\n  const handleInputChange = (value, fieldName) => {\n    setvehiculeProperties(prevState => ({ ...prevState, [fieldName]: value }));\n  };\n  // CRUD actions call\n  const _addVehicule = _user => {\n    if (vehiculeProperties.brand !== '' && vehiculeProperties.model !== '') {\n      addVehicule({ ...vehiculeProperties, userId: _user.id });\n      setvehiculeProperties(initalValues);\n      setshowModal(false);\n    } else return;\n  };\n\n  const _updateVehicule = current => {\n    console.log('vehiculeProperties', vehiculeProperties, 'current', current);\n    updateVehicule(vehiculeProperties, current._id);\n    setcurrentVehicule({});\n    setvehiculeProperties(initalValues);\n    setshowModal(false);\n    console.log('vehiculeProperties', vehiculeProperties, 'current', current);\n  };\n\n  const _deleteVehicule = current => {\n    deleteVehicule(current._id, user.id);\n    setshowDeleteModal(false);\n    setcurrentVehicule({});\n  };\n\n  useEffect(() => {\n    getVehicules(user.id);\n  }, []);\n\n  useEffect(() => {\n    if (currentVehicule) setvehiculeProperties({ ...currentVehicule });\n  }, [currentVehicule]);\n\n  return (\n    <>\n      <Button\n        className='btn-fill pull-right'\n        type='submit'\n        onClick={() => {\n          setcurrentVehicule({});\n          setvehiculeProperties(initalValues);\n\n          setshowModal(true);\n        }}\n      >\n        Nouveau véhicule\n      </Button>\n      {loading ? (\n        <div> Chargement ...</div>\n      ) : (\n        <Container fluid>\n          <hr />\n          {currentVehicule ? (\n            <>\n              <Modal\n                show={showModal}\n                onHide={() => setshowModal(false)}\n                className='search-modal text-center modal fade'\n              >\n                <Modal.Body>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title as='h4'>\n                        {currentVehicule._id\n                          ? `EV: ${currentVehicule.brand}`\n                          : `Nouveau vehicule`}\n                      </Card.Title>\n                    </Card.Header>\n                    <Card.Body>\n                      <Form>\n                        <Row>\n                          <Col md='6'>\n                            <Form.Group>\n                              <label>Marque</label>\n                              <Form.Control\n                                placeholder='Marque'\n                                type='text'\n                                name='brand'\n                                value={vehiculeProperties.brand ?? ''}\n                                onChange={e =>\n                                  handleInputChange(\n                                    e.target.value,\n                                    e.target.name\n                                  )\n                                }\n                              />\n                            </Form.Group>\n                          </Col>\n                          <Col md='6'>\n                            <Form.Group>\n                              <label>Modèle</label>\n                              <Form.Control\n                                placeholder='Modèle'\n                                type='text'\n                                name='model'\n                                value={vehiculeProperties.model ?? ''}\n                                onChange={e =>\n                                  handleInputChange(\n                                    e.target.value,\n                                    e.target.name\n                                  )\n                                }\n                              />\n                            </Form.Group>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col>\n                            <Form.Control\n                              aria-label='Connector select'\n                              as='select'\n                              custom\n                              name='standard'\n                              onChange={e =>\n                                handleInputChange(e.target.value, e.target.name)\n                              }\n                            >\n                              <option defaultValue=''>\n                                Type de connecteur\n                              </option>\n                              {connectorTypeOptions.map((option, idx) => (\n                                <option key={idx} value={option.value}>\n                                  {option.label}\n                                </option>\n                              ))}\n                            </Form.Control>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col md='6'>\n                            <Form.Group>\n                              <label>Voltage Maximum</label>\n                              <Form.Control\n                                placeholder='Voltage'\n                                type='text'\n                                name='max_voltage'\n                                value={vehiculeProperties.max_voltage ?? ''}\n                                onChange={e =>\n                                  handleInputChange(\n                                    e.target.value,\n                                    e.target.name\n                                  )\n                                }\n                              />\n                            </Form.Group>\n                          </Col>\n                          <Col md='6'>\n                            <Form.Group>\n                              <label>Ampérage Maximum</label>\n                              <Form.Control\n                                placeholder='Ampérage'\n                                type='text'\n                                name='max_amperage'\n                                value={vehiculeProperties.max_amperage ?? ''}\n                                onChange={e =>\n                                  handleInputChange(\n                                    e.target.value,\n                                    e.target.name\n                                  )\n                                }\n                              />\n                            </Form.Group>\n                          </Col>\n                        </Row>\n                      </Form>\n                      {currentVehicule._id ? (\n                        <Button\n                          className='btn-fill pull-right'\n                          type='submit'\n                          onClick={() => _updateVehicule(currentVehicule)}\n                        >\n                          Modifier\n                        </Button>\n                      ) : (\n                        <Button\n                          className='btn-fill pull-right'\n                          type='submit'\n                          onClick={() => _addVehicule(user)}\n                        >\n                          Ajouter\n                        </Button>\n                      )}\n                    </Card.Body>\n                  </Card>\n                </Modal.Body>\n              </Modal>\n              <Modal\n                show={showDeleteModal}\n                onHide={() => setshowDeleteModal(false)}\n                className='search-modal text-center modal fade'\n              >\n                <Modal.Body>\n                  <div className='modal-content'>\n                    <div className='modal-body'>\n                      <Row>\n                        <Col>{`Supprimer EV ${currentVehicule.brand}`}</Col>\n                      </Row>\n\n                      <Row>\n                        <Col>\n                          <Button\n                            className='btn-fill pull-right'\n                            type='submit'\n                            onClick={() => {\n                              _deleteVehicule(currentVehicule);\n                            }}\n                          >\n                            Supprimer\n                          </Button>\n                        </Col>\n                        <Col>\n                          <Button\n                            className='btn-fill pull-right'\n                            type='submit'\n                            onClick={() => setshowDeleteModal(false)}\n                          >\n                            Annuler\n                          </Button>\n                        </Col>\n                      </Row>\n                    </div>\n                  </div>\n                </Modal.Body>\n              </Modal>\n            </>\n          ) : (\n            <hr />\n          )}\n          <Row>\n            <Col md='12'>\n              <Row>\n                {vehicules?.length ? (\n                  vehicules?.map(vehicule => {\n                    return (\n                      <Col md='6'>\n                        <Card style={{ width: '18rem' }}>\n                          <Card.Body>\n                            <h3 className='title'>\n                              {vehicule.brand},{vehicule.model}\n                            </h3>\n\n                            <br />\n\n                            <ListGroupItem>\n                              {vehicule.standard}\n                              {/* {vehicule.standard ? (\n                                <img\n                                  alt='...'\n                                  className='avatar border-gray'\n                                  src={\n                                    require(`assets/img/connectors/${vehicule.standard}.png`)\n                                      .default\n                                  }\n                                />\n                              ) : (\n                                <br />\n                              )}{' '} */}\n                            </ListGroupItem>\n\n                            <ListGroupItem>\n                              Voltage: {vehicule.max_voltage}\n                            </ListGroupItem>\n                            <ListGroupItem>\n                              Ampérage: {vehicule.max_amperage}\n                            </ListGroupItem>\n                            <OverlayTrigger\n                              overlay={\n                                <Tooltip id='tooltip-488980961'>\n                                  Modifier\n                                </Tooltip>\n                              }\n                            >\n                              <Button\n                                className='btn-simple btn-link p-1'\n                                type='button'\n                                variant='info'\n                                onClick={() => {\n                                  setcurrentVehicule(vehicule);\n                                  setshowModal(true);\n                                  console.log(\n                                    'currentVehicule',\n                                    currentVehicule\n                                  );\n                                }}\n                              >\n                                <i className='fas fa-edit' />\n                              </Button>\n                            </OverlayTrigger>\n                            <OverlayTrigger\n                              overlay={\n                                <Tooltip id='tooltip-506045838'>\n                                  Supprimer\n                                </Tooltip>\n                              }\n                            >\n                              <Button\n                                className='btn-simple btn-link p-1'\n                                type='button'\n                                variant='danger'\n                                onClick={() => {\n                                  setcurrentVehicule(vehicule);\n                                  setshowDeleteModal(true);\n                                }}\n                              >\n                                <i className='fas fa-times' />\n                              </Button>\n                            </OverlayTrigger>\n                          </Card.Body>\n                        </Card>\n                      </Col>\n                    );\n                  })\n                ) : (\n                  <p>Aucun EV pour le moment</p>\n                )}\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      )}\n    </>\n  );\n}\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  vehicules: state.vehicule.vehicules,\n  loading: state.vehicule.loading,\n  user: state.auth.user,\n});\n\nexport default connect(mapStateToProps, {\n  getVehicules,\n  addVehicule,\n  updateVehicule,\n  deleteVehicule,\n})(Vehicule);\n","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Dashboard.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/api.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/greenEnergyTypes.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/bookable.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/payment.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/guest/MapGuest.js",["218","219"],"import React, { useEffect, useRef, useState } from 'react';\nimport {\n  getLocations,\n  getLocationsByUserGeolocation,\n} from '../../actions/locationAction';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { usePosition } from 'hooks/usePosition';\n\nimport {\n  Card,\n  Modal,\n  Button,\n  Alert,\n  ListGroupItem,\n  ListGroup,\n  Row,\n  Col,\n} from 'react-bootstrap';\n\nfunction MapGuest({\n  locations,\n  getLocations,\n  getLocationsByUserGeolocation,\n  loading,\n}) {\n  const ref = useRef();\n  const [carte, setCarte] = useState();\n  const [markers, setMarkers] = useState([]);\n  const [geocoder, setgeocoder] = useState();\n\n  const [showModal, setshowModal] = useState(false);\n  const [currentLocation, setcurrentLocation] = useState({});\n\n  // Initialize Map & Geocoding\n  useEffect(() => {\n    const onLoad = () => {\n      try {\n        const options = {\n          lat: 48.856614, //latitude\n          lng: 2.3522219, // longitude\n        };\n        const _map = new window.google.maps.Map(ref.current, {\n          center: options,\n          zoom: 6,\n        });\n        setCarte(_map);\n        const _geocoder = new window.google.maps.Geocoder();\n        console.log(_geocoder, 'onGeocode');\n        setgeocoder(_geocoder);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (window.google === undefined) {\n      const script = document.createElement(`script`);\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBwo-QDe0-NuBA5EZSM9UiyAnTYok74maU`;\n      document.head.append(script);\n      script.addEventListener(`load`, onLoad());\n    } else onLoad();\n  }, []);\n  // Geocoding\n  useEffect(() => {\n    try {\n      // `${placeName}`\n      geocoder.geocode({ address: 'paris' }, (results, status) => {\n        if (status == 'OK') {\n          console.log(\n            status,\n            results[0].geometry.location.lat(),\n            results[0].geometry.location.lng()\n          );\n        } else {\n          alert(\n            'Geocode was not successful for the following reason: ' + status\n          );\n        }\n      });\n      // setgeocoder(_geocoder);\n    } catch (err) {\n      console.log(\n        '========================================================================================================================================',\n        err\n      );\n    }\n  }, [geocoder]);\n\n  // useEffect(() => {\n  //   const onGeocode = () => {\n  //     try {\n  //       const _geocoder = new window.google.maps.Geocoder();\n  //       console.log(_geocoder, 'onGeocode');\n  //       // setgeocoder(_geocoder);\n  //     } catch (err) {\n  //       console.log(\n  //         '========================================================================================================================================',\n  //         err\n  //       );\n  //     }\n  //   };\n  //   if (!window.google) {\n  //     const script = document.createElement(`script`);\n  //     script.src = `https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBwo-QDe0-NuBA5EZSM9UiyAnTYok74maU`; //  AIzaSyAhobSlTjGBQSW4nfojOb8T7PFvVN8hG94\n\n  //     document.head.append(script);\n  //     script.addEventListener(`load`, onGeocode);\n  //   } else onGeocode();\n  //   // return () => {\n  //   //   cleanup;\n  //   // };\n  // }, []);\n\n  // get all locations at component mount\n  useEffect(() => {\n    console.log('getLocations');\n    getLocations();\n  }, []);\n\n  // call add markers every time locations data change or map rerenders\n  useEffect(() => {\n    if (locations && carte) {\n      addMarkers(locations, carte);\n    }\n  }, [locations, carte]);\n\n  //  removes markers from map\n  const removeMarkers = markersArray => {\n    markersArray?.forEach(marker => marker.setMap(null));\n    setMarkers([]);\n  };\n\n  // add markers to the map after getting/filtering locations\n  const addMarkers = (locs, mapInstance) => {\n    removeMarkers(markers);\n    const tmpMarkers = [];\n    const bounds = new window.google.maps.LatLngBounds();\n    //45.891181, 4.8223994\n\n    // if (locs.length > 0) {\n    locs.map(location => {\n      bounds.extend(\n        new window.google.maps.LatLng(\n          location.AddressInfo.Latitude,\n          location.AddressInfo.Longitude\n        )\n      );\n      // Initialize marker\n      const marker = new window.google.maps.Marker({\n        position: new window.google.maps.LatLng(\n          location.AddressInfo.Latitude,\n          location.AddressInfo.Longitude\n        ),\n        title: location.AddressInfo.Title,\n      });\n      marker.setMap(mapInstance);\n\n      marker.addListener('click', () => {\n        setcurrentLocation(location);\n        console.log('current location', location);\n\n        setshowModal(true);\n      });\n      tmpMarkers.push(marker);\n    });\n    // } else {\n    //   console.log('selectedLatLng');\n    // }\n\n    setMarkers(tmpMarkers);\n    mapInstance.fitBounds(bounds);\n  };\n\n  return (\n    <div\n      style={{ height: `60vh`, margin: `1em 0`, borderRadius: `0.5em` }}\n      ref={ref}\n    />\n  );\n}\n\n// Map.defaultProps = mapOptions;\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  locations: state.location.locations,\n  loading: state.location.loading,\n});\n\nexport default connect(mapStateToProps, {\n  getLocations,\n  getLocationsByUserGeolocation,\n})(MapGuest);\n","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/locationAction.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/connectionType.js",[],[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/actions/vehiculeActions.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/connectorFormat.js",[],[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/powerTypes.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/cpo/Map.js",["220"],"import React, { useEffect, useRef, useState } from 'react';\nimport { getCPOLocations } from '../../actions/locationAction';\nimport { connect } from 'react-redux';\nimport { usePosition } from '../../hooks/usePosition';\nimport { Alert, Modal } from 'react-bootstrap';\n\nconst Map = ({ user, locations, filters }) => {\n  // const  = props;\n\n  const [map, setMap] = useState();\n  const ref = useRef(null);\n  const { latitude, longitude } = usePosition();\n  const [markers, setMarkers] = useState([]);\n\n  const removeMarkers = markersArray => {\n    markersArray?.forEach(marker => marker.setMap(null));\n    setMarkers([]);\n  };\n  const addMarkers = (locs, mapInstance) => {\n    console.log('here?');\n    markers.forEach(marker => marker.setMap(null));\n    // Deleting previous markers before adding the new list of markers\n    const tmpMarkers = [];\n    const bounds = new window.google.maps.LatLngBounds();\n    if (locs.length > 0) {\n      locs.forEach(location => {\n        // debugger; // eslint-disable-line no-debugger\n        // console.log('=========== ~ file: Map.js ~ line 37 ~ location', location);\n        const marker = new window.google.maps.Marker({\n          position: new window.google.maps.LatLng(\n            parseFloat(location.coordinates.latitude),\n            parseFloat(location.coordinates.longitude)\n          ),\n          // title: location.station_name,\n        });\n        marker.setMap(mapInstance);\n\n        console.log('marker', locs);\n\n        const infowindow = new window.google.maps.InfoWindow({\n          content: `<p>Adresse: ${location.address}</p>\n          <ul>\n            <li><strong>Conditions d'accés</strong>: ${location.condition_acces}</li>\n            <li><strong>Type d'emplacement</strong>: ${location.location_type}</li>\n            <li><strong>Phone</strong>: <a href=\"tel:${location.telephone_operateur}\">${location.telephone_operateur}</a></li>\n          </ul>`,\n          boxStyle: {\n            width: '300px',\n            height: '300px',\n          },\n        });\n\n        bounds.extend(\n          new window.google.maps.LatLng(\n            location.coordinates.latitude,\n            location.coordinates.longitude\n          )\n        );\n\n        marker.addListener('click', () => {\n          infowindow.open({\n            anchor: marker,\n            map: mapInstance,\n            shouldFocus: true,\n          });\n        });\n\n        tmpMarkers.push(marker);\n      });\n    }\n\n    mapInstance.fitBounds(bounds);\n  };\n  useEffect(() => {\n    const onLoad = () => {\n      try {\n        const options = {\n          lat: 45.891181, //45.891181\n          lng: 7, // 4.8223994\n        };\n        const _map = new window.google.maps.Map(ref.current, {\n          center: options,\n          zoom: 6,\n        });\n        setMap(_map);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (!window.google) {\n      const script = document.createElement(`script`);\n      // + process.env.GOOGLE_MAPS_API_KEY;\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBwo-QDe0-NuBA5EZSM9UiyAnTYok74maU`;\n      document.head.append(script);\n      script.addEventListener(`load`, onLoad);\n\n      // return () => script.removeEventListener(`load`, onLoad);\n    } else onLoad();\n  }, []);\n\n  useEffect(() => {\n    getCPOLocations(user.id);\n    console.log('user', user);\n  });\n\n  // Drop Markers\n  useEffect(() => {\n    if (locations.length && map) {\n      // .renderingType != 'UNINITIALIZED'\n      addMarkers(locations, map, addedMarkers => setMarkers(addedMarkers));\n    }\n    // console.log('locations from the server', locations);\n  }, [locations, map]);\n\n  // Map Filter\n  // useEffect(() => {\n  //   let filterdLoc = locations;\n  //   if (map && locations) {\n  //     // console.log(filters, 'filters useEffect');\n  //     if (filters.isGreenEnergy) {\n  //       filterdLoc = locations.filter(\n  //         loc => loc.is_green_energy == filters.isGreenEnergy\n  //       );\n  //       addMarkers(filterdLoc, map);\n  //     }\n  //     if (filters.isBookable) {\n  //       filterdLoc = locations.filter(\n  //         loc => loc.bookable == filters.isBookable\n  //       );\n  //       addMarkers(filterdLoc, map);\n  //     }\n  //     if (filters.isCbPayment) {\n  //       filterdLoc = locations.filter(\n  //         loc => loc.payment_by_card == filters.isCbPayment\n  //       );\n  //       addMarkers(filterdLoc, map);\n  //     }\n  //     if (filters.isFreeCharging) {\n  //       filterdLoc = locations.filter(\n  //         loc => loc.free_charging == filters.isFreeCharging\n  //       );\n  //       addMarkers(filterdLoc, map);\n  //     }\n  //     if (filters.isAvailable) {\n  //       filterdLoc = locations.filter(\n  //         loc => loc.payment_by_card == filters.isAvailable\n  //       );\n  //       addMarkers(filterdLoc, map);\n  //     }\n  //     if (filters.supportsTwoWheel) {\n  //       filterdLoc = locations.filter(\n  //         loc => loc.two_wheel == filters.supportsTwoWheel\n  //       );\n  //       addMarkers(filterdLoc, map);\n  //     }\n\n  //     // if (!filters) {\n  //     //   addMarkers(filterdLoc, map);\n  //     // }\n  //   }\n  //   console.log('filterdLoc', filterdLoc);\n  // }, [filters, locations]);\n\n  return (\n    <>\n      <div\n        style={{ height: `60vh`, margin: `1em 0`, borderRadius: `0.5em` }}\n        ref={ref}\n      />\n    </>\n  );\n};\n\n// Map.defaultProps = mapOptions;\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  locations: state.location.locations,\n  loading: state.location.loading,\n  user: state.auth.user,\n});\n\n// export default ;\nexport default connect(mapStateToProps, { getCPOLocations })(Map);\n// export default React.forwardRef((props, ref) => (\n//   <ConnectedMap {...props} forwaredRef={ref} />\n// ));\n","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/hooks/usePosition.js",["221"],"import { useState, useEffect } from 'react';\n\nconst defaultSettings = {\n  enableHighAccuracy: false,\n  timeout: Infinity,\n  maximumAge: 0,\n};\n\nexport const usePosition = (watch = false, settings = defaultSettings) => {\n  const [position, setPosition] = useState({});\n  const [error, setError] = useState(null);\n\n  const onChange = ({ coords, timestamp }) => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      accuracy: coords.accuracy,\n      speed: coords.speed,\n      timestamp,\n    });\n  };\n\n  const onError = error => {\n    setError(error.message);\n  };\n\n  useEffect(() => {\n    if (!navigator || !navigator.geolocation) {\n      setError('Geolocation is not supported');\n      return;\n    }\n\n    let watcher = null;\n    if (watch) {\n      watcher = navigator.geolocation.watchPosition(\n        onChange,\n        onError,\n        settings\n      );\n    } else {\n      navigator.geolocation.getCurrentPosition(onChange, onError, settings);\n    }\n\n    return () => watcher && navigator.geolocation.clearWatch(watcher);\n  }, [settings.enableHighAccuracy, settings.timeout, settings.maximumAge]);\n\n  return { ...position, error };\n};\n","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/connectorTypes.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/components/msp/Map.js",["222","223","224","225","226","227"],"import React, { useEffect, useRef, useState } from 'react';\nimport {\n  getLocations,\n  getLocationsByUserGeolocation,\n  getLocationsByConnectorType,\n} from '../../actions/locationAction';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { usePosition } from './../../hooks/usePosition';\n\nimport {\n  Card,\n  Modal,\n  Button,\n  Alert,\n  ListGroupItem,\n  ListGroup,\n  Row,\n  Col,\n} from 'react-bootstrap';\nimport isEmpty from 'validation/is-empty';\n\nconst Map = ({\n  locations,\n  getLocations,\n  getLocationsByUserGeolocation,\n  getLocationsByConnectorType,\n  filters,\n  connectiontypeid,\n  loading,\n  address,\n  user,\n}) => {\n  const [carte, setCarte] = useState();\n  const [geocoder, setgeocoder] = useState();\n  const ref = useRef(null);\n  const history = useHistory();\n\n  // const { latitude, longitude } = usePosition();\n  const [markers, setMarkers] = useState([]);\n  const [showModal, setshowModal] = useState(false);\n  const [currentLocation, setcurrentLocation] = useState({});\n  const initialSelectedCoord = {\n    latitude: 45.891181,\n    longitude: 4.8223994,\n  };\n  const [selectedLatLng, setselectedLatLng] = useState(initialSelectedCoord);\n  const [reservation, setreservation] = useState(false);\n\n  const [searchParameters, setsearchParameters] = useState({\n    latitude: selectedLatLng.latitude ?? 45.891181,\n    longitude: selectedLatLng.longitude ?? 4.8223994,\n    connectiontypeid: null,\n  });\n\n  // const [connector, setconnector] = useState();\n\n  //  removes markers from map\n  const removeMarkers = markersArray => {\n    markersArray?.forEach(marker => marker.setMap(null));\n    setMarkers([]);\n  };\n\n  // add markers to the map after getting/filtering locations\n  const addMarkers = (locs, mapInstance) => {\n    removeMarkers(markers);\n    const tmpMarkers = [];\n    const bounds = new window.google.maps.LatLngBounds();\n    //45.891181, 4.8223994\n\n    if (locs.length > 0) {\n      locs.map(location => {\n        bounds.extend(\n          new window.google.maps.LatLng(\n            location.AddressInfo.Latitude,\n            location.AddressInfo.Longitude\n          )\n        );\n        // Initialize marker\n        const marker = new window.google.maps.Marker({\n          position: new window.google.maps.LatLng(\n            location.AddressInfo.Latitude,\n            location.AddressInfo.Longitude\n          ),\n          title: location.AddressInfo.Title,\n        });\n        marker.setMap(mapInstance);\n\n        marker.addListener('click', () => {\n          setcurrentLocation(location);\n          console.log('current location', location);\n\n          setshowModal(true);\n        });\n        tmpMarkers.push(marker);\n        // Create the initial InfoWindow.\n        // if (selectedLatLng) {\n        //   let infoWindow = new window.google.maps.InfoWindow({\n        //     content: 'Cliquez où vous voulez chercher votre borne',\n        //     position: selectedLatLng,\n        //   });\n        //   infoWindow.open(mapInstance);\n        //   mapInstance.addListener('click', mapsMouseEvent => {\n        //     console.log('mapsMouseEvent', mapsMouseEvent.latLng.toJSON().lat);\n        //     infoWindow.close();\n        //     setselectedLatLng({\n        //       latitude: mapsMouseEvent.latLng.toJSON().lat,\n        //       longitude: mapsMouseEvent.latLng.toJSON().lng,\n        //     });\n\n        //     // setshowModal(true);\n\n        //     console.log('selectedLatLng', selectedLatLng);\n        //     setcurrentLocation({});\n        //   });\n        //}\n      });\n    } else {\n      console.log('selectedLatLng', selectedLatLng);\n    }\n\n    setMarkers(tmpMarkers);\n    mapInstance.fitBounds(bounds);\n  };\n  const reserver = () => {\n    history.push('/admin/reserver');\n  };\n\n  // Initialize Map & Geocoding\n  useEffect(() => {\n    const onLoad = () => {\n      try {\n        const options = {\n          lat: 48.856614, //latitude\n          lng: 2.3522219, // longitude\n        };\n        const _map = new window.google.maps.Map(ref.current, {\n          center: options,\n          zoom: 6,\n        });\n        setCarte(_map);\n        const _geocoder = new window.google.maps.Geocoder();\n        console.log(_geocoder, 'onGeocode');\n        console.log(searchParameters, 'searchParameters');\n\n        setgeocoder(_geocoder);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (window.google === undefined || !window.google) {\n      const script = document.createElement(`script`);\n      script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBwo-QDe0-NuBA5EZSM9UiyAnTYok74maU`;\n      document.head.append(script);\n      script.addEventListener(`load`, onLoad());\n    } else onLoad();\n  }, []);\n  // Geocoding\n  useEffect(() => {\n    try {\n      // `${placeName}`\n      geocoder.geocode({ address: `${address}` }, (results, status) => {\n        if (status == 'OK') {\n          const resultLatLng = new window.google.maps.LatLng(\n            results[0].geometry.location.lat(),\n            results[0].geometry.location.lng()\n          );\n          carte.setCenter(resultLatLng);\n          const marker = new window.google.maps.Marker({\n            map: carte,\n            position: results[0].geometry.location,\n          });\n          setselectedLatLng({\n            latitude: results[0].geometry.location.lat(),\n            longitude: results[0].geometry.location.lng(),\n          });\n          // setsearchParameters({\n          //   latitude: results[0].geometry.location.lat(),\n          //   longitude: results[0].geometry.location.lng(),\n          // });\n\n          let infoWindow = new window.google.maps.InfoWindow({\n            content: 'Filtrez les stations à proximité de cette position',\n            position: results[0].geometry.location,\n          });\n          infoWindow.open(carte);\n          marker.setMap(carte);\n          console.log(\n            status,\n            results[0].geometry.location.lat(),\n            'lat',\n            results[0].geometry.location.lng(),\n            'lng'\n          );\n        } else {\n          alert(\n            'Geocode was not successful for the following reason: ' + status\n          );\n        }\n      });\n      // setgeocoder(_geocoder);\n    } catch (err) {\n      console.log(\n        '========================================================================================================================================',\n        err\n      );\n    }\n  }, [geocoder, address]);\n\n  // useEffect(() => {\n  //   if (geocoder) {\n  //     if (address !== undefined && !isEmpty(address))\n  //       geocoder.geocode({ address: address }, (results, status) => {\n  //         if (status == 'OK') {\n  //           carte.setCenter(\n  //             results[0].geometry.location[0],\n  //             results[0].geometry.location[1]\n  //           );\n  //           const marker = new window.google.maps.Marker({\n  //             map: carte,\n  //             position: results[0].geometry.location,\n  //           });\n  //           setselectedLatLng(\n  //             results[0].geometry.location[0],\n  //             results[0].geometry.location[1]\n  //           );\n  //           let infoWindow = new window.google.maps.InfoWindow({\n  //             content: 'Filtrez les stations à proximité de cette position',\n  //             position:\n  //               (results[0].geometry.location[0],\n  //               results[0].geometry.location[1]),\n  //           });\n  //           infoWindow.open(carte);\n  //           marker.setMap(carte);\n\n  //           console.log(\n  //             'geometry',\n  //             results[0].geometry.location[0],\n  //             results[0].geometry.location[1]\n  //           );\n  //         } else {\n  //           alert(\n  //             'Geocode was not successful for the following reason: ' + status\n  //           );\n  //         }\n  //       });\n  //     else {\n  //       geocoder.geocode({ address: user.address }, (results, status) => {\n  //         if (status == 'OK') {\n  //           carte.setCenter(\n  //             results[0].geometry.location[0],\n  //             results[0].geometry.location[1]\n  //           );\n  //           const marker = new window.google.maps.Marker({\n  //             map: carte,\n  //             position: results[0].geometry.location,\n  //           });\n  //           marker.setMap(carte);\n  //           // setselectedLatLng(results[0].geometry.location);\n  //           console.log(\n  //             'user.address',\n  //             results[0].geometry.location[0],\n  //             results[0].geometry.location[1]\n  //           );\n  //         } else {\n  //           alert(\n  //             'Geocode was not successful for the following reason: ' + status\n  //           );\n  //         }\n  //       });\n  //     }\n  //   } else console.log('geocoder didnt work');\n  // }, [address]);\n\n  useEffect(() => {\n    console.log('getLocations');\n    getLocations();\n  }, []);\n\n  useEffect(() => {\n    console.log('getLocationsByUserGeolocation', searchParameters);\n    getLocationsByUserGeolocation(selectedLatLng);\n  }, [selectedLatLng]);\n\n  // useEffect(() => {\n  //   console.log('getLocationsByConnectorType');\n\n  //   getLocationsByConnectorType(connectiontypeid);\n  // }, [connectiontypeid]);\n\n  // Drop Markers\n  useEffect(() => {\n    if (locations && carte) {\n      addMarkers(locations, carte);\n      const myLatlng = { lat: 49.2603667, lng: 3.0872607 };\n      // .renderingType != 'UNINITIALIZED'\n    }\n  }, [locations, carte]);\n\n  // Map Filter\n  useEffect(() => {\n    let filterdLoc = locations;\n    if (carte && locations.length > 0) {\n      if (filters.recently_verified) {\n        filterdLoc = locations.filter(\n          loc => loc.IsRecentlyVerified === filters.recently_verified\n        );\n        addMarkers(filterdLoc, carte);\n      }\n      if (filters.is_operational) {\n        filterdLoc = locations.filter(\n          loc => loc.StatusType.IsOperational === filters.is_operational\n        );\n        addMarkers(filterdLoc, carte);\n      }\n      if (filters.is_pay_at_location) {\n        filterdLoc = locations.filter(\n          loc => loc.UsageType?.IsPayAtLocation === filters.is_pay_at_location\n        );\n        addMarkers(filterdLoc, carte);\n      }\n      if (filters.is_membership_required) {\n        filterdLoc = locations.filter(\n          loc =>\n            loc.UsageType?.IsMembershipRequired ===\n            filters.is_membership_required\n        );\n        addMarkers(filterdLoc, carte);\n      }\n\n      addMarkers(filterdLoc, carte);\n    }\n  }, [filters]);\n\n  return (\n    <>\n      {currentLocation.AddressInfo ? (\n        <Modal\n          show={showModal}\n          onHide={() => setshowModal(false)}\n          className='search-modal text-center modal fade'\n        >\n          <Modal.Body>\n            <Card>\n              <Card.Body>\n                <Card.Title>{currentLocation.AddressInfo.Title}</Card.Title>\n                <br />\n                <Card.Subtitle>\n                  {currentLocation.AddressInfo.AddressLine1}\n                </Card.Subtitle>\n\n                <Row>\n                  <Col>\n                    {currentLocation.AddressInfo.StateOrProvince},\n                    {currentLocation.AddressInfo.Postcode}\n                  </Col>\n                </Row>\n                <Row>\n                  <Col> {currentLocation.AddressInfo.Town}</Col>\n                </Row>\n                <Row>\n                  <Col>\n                    <p> Prix de recharge: {currentLocation.UsageCost}</p>\n                  </Col>\n                </Row>\n\n                {currentLocation.Connections.map(connection => (\n                  <>\n                    <Row>\n                      <Col>{connection.ConnectionType.FormalName}</Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        <p> {connection.CurrentType.Title}</p>\n                      </Col>\n                      <Col>\n                        <p>\n                          {connection.ConnectionType.IsDiscontinued\n                            ? 'Connexion Indirecte'\n                            : 'Connexion Directe'}\n                        </p>\n                      </Col>\n                      <Col>\n                        <p> Ampérage {connection.Amps ?? 'inconnu'}</p>\n                      </Col>\n                      <Col>\n                        <p> Voltage {connection.Voltage ?? ' inconnu'}</p>\n                      </Col>\n                      <Col>\n                        <p>\n                          {' '}\n                          Puissance par kWh {connection.PowerKW ?? ' inconnue'}\n                        </p>{' '}\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        <small className='text-muted'>\n                          Commentaires de recharge:\n                          {connection.Level?.Comments ?? 'Aucun'}\n                        </small>\n                      </Col>\n                    </Row>\n                  </>\n                ))}\n                {currentLocation.OperatorInfo?.WebsiteURL}\n              </Card.Body>\n              <Card.Footer>\n                <Button\n                  onClick={e => {\n                    setreservation(currentLocation);\n                    setshowModal(false);\n                  }}\n                >\n                  Réserver\n                </Button>\n              </Card.Footer>\n            </Card>\n          </Modal.Body>\n        </Modal>\n      ) : (\n        <></>\n      )}\n\n      <div>\n        {loading ? (\n          <div>\n            <Alert variant='info'>\n              <span>Recherche des stations ...</span>\n            </Alert>\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n      <div>\n        {reservation ? (\n          <div>\n            <Alert variant='info'>\n              <span>{reservation.AddressInfo.Title} réservée</span>\n            </Alert>\n          </div>\n        ) : (\n          <hr />\n        )}\n      </div>\n      <div\n        style={{ height: `60vh`, margin: `1em 0`, borderRadius: `0.5em` }}\n        ref={ref}\n      />\n    </>\n  );\n};\n\n// Map.defaultProps = mapOptions;\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  locations: state.location.locations,\n  loading: state.location.loading,\n  user: state.auth.user,\n});\n\n// export default ;\nexport default connect(mapStateToProps, {\n  getLocations,\n  getLocationsByUserGeolocation,\n  getLocationsByConnectorType,\n})(Map);\n","/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/constants/roles.js",[],"/home/unfoat/Documents/menaps/light-bootstrap-dashboard-react/src/views/Page404.js",[],{"ruleId":"228","severity":1,"message":"229","line":92,"column":6,"nodeType":"230","endLine":92,"endColumn":23,"suggestions":"231"},{"ruleId":"228","severity":1,"message":"232","line":81,"column":6,"nodeType":"230","endLine":81,"endColumn":8,"suggestions":"233"},{"ruleId":"228","severity":1,"message":"234","line":118,"column":6,"nodeType":"230","endLine":118,"endColumn":8,"suggestions":"235"},{"ruleId":"228","severity":1,"message":"236","line":125,"column":6,"nodeType":"230","endLine":125,"endColumn":24,"suggestions":"237"},{"ruleId":"228","severity":1,"message":"236","line":114,"column":6,"nodeType":"230","endLine":114,"endColumn":22,"suggestions":"238"},{"ruleId":"228","severity":1,"message":"239","line":45,"column":6,"nodeType":"230","endLine":45,"endColumn":74,"suggestions":"240"},{"ruleId":"228","severity":1,"message":"241","line":159,"column":6,"nodeType":"230","endLine":159,"endColumn":8,"suggestions":"242"},{"ruleId":"228","severity":1,"message":"243","line":210,"column":6,"nodeType":"230","endLine":210,"endColumn":25,"suggestions":"244"},{"ruleId":"228","severity":1,"message":"234","line":280,"column":6,"nodeType":"230","endLine":280,"endColumn":8,"suggestions":"245"},{"ruleId":"228","severity":1,"message":"246","line":285,"column":6,"nodeType":"230","endLine":285,"endColumn":22,"suggestions":"247"},{"ruleId":"228","severity":1,"message":"236","line":300,"column":6,"nodeType":"230","endLine":300,"endColumn":24,"suggestions":"248"},{"ruleId":"228","severity":1,"message":"249","line":335,"column":6,"nodeType":"230","endLine":335,"endColumn":15,"suggestions":"250"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.id'. Either include it or remove the dependency array.","ArrayExpression",["251"],"React Hook useEffect has missing dependencies: 'getVehicules' and 'user.id'. Either include them or remove the dependency array. If 'getVehicules' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["252"],"React Hook useEffect has a missing dependency: 'getLocations'. Either include it or remove the dependency array. If 'getLocations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["253"],"React Hook useEffect has a missing dependency: 'addMarkers'. Either include it or remove the dependency array.",["254"],["255"],"React Hook useEffect has missing dependencies: 'settings' and 'watch'. Either include them or remove the dependency array.",["256"],"React Hook useEffect has a missing dependency: 'searchParameters'. Either include it or remove the dependency array.",["257"],"React Hook useEffect has a missing dependency: 'carte'. Either include it or remove the dependency array.",["258"],["259"],"React Hook useEffect has missing dependencies: 'getLocationsByUserGeolocation' and 'searchParameters'. Either include them or remove the dependency array. If 'getLocationsByUserGeolocation' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["260"],["261"],"React Hook useEffect has missing dependencies: 'addMarkers', 'carte', and 'locations'. Either include them or remove the dependency array.",["262"],{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"267","fix":"279"},{"desc":"280","fix":"281"},{"desc":"269","fix":"282"},{"desc":"283","fix":"284"},"Update the dependencies array to be: [getCPOLocations, user.id]",{"range":"285","text":"286"},"Update the dependencies array to be: [getVehicules, user.id]",{"range":"287","text":"288"},"Update the dependencies array to be: [getLocations]",{"range":"289","text":"290"},"Update the dependencies array to be: [locations, carte, addMarkers]",{"range":"291","text":"292"},"Update the dependencies array to be: [addMarkers, locations, map]",{"range":"293","text":"294"},"Update the dependencies array to be: [settings.enableHighAccuracy, settings.timeout, settings.maximumAge, watch, settings]",{"range":"295","text":"296"},"Update the dependencies array to be: [searchParameters]",{"range":"297","text":"298"},"Update the dependencies array to be: [geocoder, address, carte]",{"range":"299","text":"300"},{"range":"301","text":"290"},"Update the dependencies array to be: [getLocationsByUserGeolocation, searchParameters, selectedLatLng]",{"range":"302","text":"303"},{"range":"304","text":"292"},"Update the dependencies array to be: [addMarkers, carte, filters, locations]",{"range":"305","text":"306"},[2605,2622],"[getCPOLocations, user.id]",[2265,2267],"[getVehicules, user.id]",[3413,3415],"[getLocations]",[3588,3606],"[locations, carte, addMarkers]",[3604,3620],"[addMarkers, locations, map]",[1066,1134],"[settings.enableHighAccuracy, settings.timeout, settings.maximumAge, watch, settings]",[4692,4694],"[searchParameters]",[6419,6438],"[geocoder, address, carte]",[8906,8908],[9056,9072],"[getLocationsByUserGeolocation, searchParameters, selectedLatLng]",[9453,9471],[10514,10523],"[addMarkers, carte, filters, locations]"]